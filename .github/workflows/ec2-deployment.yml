name: EC2 Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set tag env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install Turbo CLI
        run: npm install -g turbo

      - name: Setup Biome
        uses: biomejs/setup-biome@v2

      - name: Run Biome Lint
        run: turbo run format-and-lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push web-api Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web-api/Dockerfile
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_URI }}:web-api-latest
            ${{ secrets.ECR_REPOSITORY_URI }}:web-api-${{ env.RELEASE_VERSION }}
          platforms: |
            linux/arm64
            linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push workers Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/workers/Dockerfile
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_URI }}:workers-latest
            ${{ secrets.ECR_REPOSITORY_URI }}:workers-${{ env.RELEASE_VERSION }}
          platforms: |
            linux/arm64
            linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install dependencies for sql generation
        run: pnpm install

      - name: Run SQL schema generation
        run: turbo run @repo/adapters#generate

      - name: Copy .sql file to EC2
        run: |
          SQL_FILE=$(find packages/adapters/src/repositories/drizzle/ -name "*.sql")
          scp -i ${{ secrets.EC2_KEY }} $SQL_FILE ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/wyt-api/init.sql

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ${{ secrets.EC2_KEY }} docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/wyt-api/

      - name: Run docker-compose on EC2
        run: |
          ssh -i ${{ secrets.EC2_KEY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/wyt-api/
            export WORKERS_IMAGE=${{ secrets.ECR_REPOSITORY_URI }}:workers-latest
            export WEB_API_IMAGE=${{ secrets.ECR_REPOSITORY_URI }}:web-api-latest
            export COINGECKO_API_KEY=${{ secrets.COINGECKO_API_KEY }}
            export QUICKNODE_SOLANA_RPC=${{ secrets.QUICKNODE_SOLANA_RPC }}
            export ALCHEMY_SOLANA_RPC=${{ secrets.ALCHEMY_SOLANA_RPC }}
            export NODE_ENV=production
            export BASE_URL=${{ secrets.BASE_URL }}
            export MORALIS_API_KEY=${{ secrets.MORALIS_API_KEY }}
            export MORALIS_STREAMS_SECRET_KEY=${{ secrets.MORALIS_STREAMS_SECRET_KEY }}
            export API_TOKEN=${{ secrets.API_TOKEN }}
            export PG_USER=${{ secrets.PG_USER }}
            export PG_PASSWORD=${{ secrets.PG_PASSWORD }}
            export PG_DB=${{ secrets.PG_DB }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
            docker image rm ${{ secrets.ECR_REPOSITORY_URI }}:workers-latest
            docker image rm ${{ secrets.ECR_REPOSITORY_URI }}:web-api-latest
            docker-compose up -d
          EOF
