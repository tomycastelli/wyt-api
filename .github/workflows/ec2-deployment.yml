name: EC2 Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set tag env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install Turbo CLI
        run: npm install -g turbo

      - name: Setup Biome
        uses: biomejs/setup-biome@v2

      - name: Run Biome Lint
        run: turbo run format-and-lint

      - name: Install dependencies for SQL generation
        run: pnpm install

      - name: Build projects for SQL generation
        run: turbo run build

      - name: Run SQL schema generation
        run: turbo run @repo/adapters#generate

      - name: Upload SQL schema artifact
        uses: actions/upload-artifact@v4
        with:
          name: sql-schema
          path: packages/adapters/src/repositories/drizzle/*.sql

  build-and-push:
    runs-on: ubuntu-latest
    needs: setup-and-build
    strategy:
      matrix:
        app: [web-api, workers]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set tag env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_URI }}:${{ matrix.app }}-latest
            ${{ secrets.ECR_REPOSITORY_URI }}:${{ matrix.app }}-${{ env.RELEASE_VERSION }}
          platforms: |
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [setup-and-build, build-and-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download SQL schema artifact
        uses: actions/download-artifact@v4
        with:
          name: sql-schema
          path: packages/adapters/src/repositories/drizzle/

      - name: Setup SSH
        run: |
          # Add EC2 to known hosts
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          # Decode the base64 encoded private key using openssl and save it to a temporary file
          echo "${{ secrets.EC2_KEY_BASE64 }}" | openssl enc -d -base64 -out /tmp/ec2_key
          chmod 600 /tmp/ec2_key

          # Verify the key format
          if ! grep -q "BEGIN RSA PRIVATE KEY" /tmp/ec2_key && ! grep -q "BEGIN OPENSSH PRIVATE KEY" /tmp/ec2_key; then
            echo "Invalid private key format"
            exit 1
          fi

      - name: Copy files to EC2
        run: |
          # Find the generated SQL file
          SQL_FILE=$(find packages/adapters/src/repositories/drizzle/ -name "*.sql")
          echo "SQL_FILE: $SQL_FILE"

          # Copy the SQL file to the EC2 instance
          scp -vvv -i /tmp/ec2_key $SQL_FILE ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/wyt-api/init.sql

          # Copy the docker-compose.yml file to the EC2 instance
          scp -vvv -i /tmp/ec2_key docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/wyt-api

      - name: Run docker-compose on EC2
        run: |
          ssh -i /tmp/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/wyt-api/
            export WORKERS_IMAGE=${{ secrets.ECR_REPOSITORY_URI }}:workers-latest
            export WEB_API_IMAGE=${{ secrets.ECR_REPOSITORY_URI }}:web-api-latest
            export COINGECKO_API_KEY=${{ secrets.COINGECKO_API_KEY }}
            export QUICKNODE_SOLANA_RPC=${{ secrets.QUICKNODE_SOLANA_RPC }}
            export ALCHEMY_SOLANA_RPC=${{ secrets.ALCHEMY_SOLANA_RPC }}
            export NODE_ENV=production
            export BASE_URL=${{ secrets.BASE_URL }}
            export MORALIS_API_KEY=${{ secrets.MORALIS_API_KEY }}
            export MORALIS_STREAMS_SECRET_KEY=${{ secrets.MORALIS_STREAMS_SECRET_KEY }}
            export API_TOKEN=${{ secrets.API_TOKEN }}
            export PG_USER=${{ secrets.PG_USER }}
            export PG_PASSWORD=${{ secrets.PG_PASSWORD }}
            export PG_DB=${{ secrets.PG_DB }}
            docker-compose rm -sf web-api workers
            docker image rm ${{ secrets.ECR_REPOSITORY_URI }}:workers-latest ${{ secrets.ECR_REPOSITORY_URI }}:web-api-latest
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
            docker-compose up -d
          EOF
