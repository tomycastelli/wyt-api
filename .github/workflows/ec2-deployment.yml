name: EC2 Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install Turbo CLI
      run: npm install -g turbo

    - name: Run Biome Lint
      run: turbo run format-and-lint

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push web-api Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:latest -f apps/web/api/Dockerfile .
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Build and push workers Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:latest -f apps/workers/Dockerfile .
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Run SQL schema generation
      run: turbo run @repo/adapters#generate

    - name: Copy .sql file to EC2
      run: |
        SQL_FILE=$(find packages/adapters/src/repositories/migrations/ -name "*.sql")
        scp -i ${{ secrets.EC2_KEY }} $SQL_FILE ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/wyt-api/

    - name: Copy docker-compose.yml to EC2
      run: |
        scp -i ${{ secrets.EC2_KEY }} docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/wyt-api/

    - name: Run docker-compose on EC2
      run: |
        ssh -i ${{ secrets.EC2_KEY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/wyt-api/
          export WORKERS_IMAGE=${{ secrets.ECR_REPOSITORY_URI }}/workers:latest
          export WEB_API_IMAGE=${{ secrets.ECR_REPOSITORY_URI }}/web-api:latest
          export POSTGRES_URL=your_postgres_url
          export COINGECKO_API_KEY=your_coingecko_api_key
          export QUICKNODE_SOLANA_RPC=your_quicknode_solana_rpc
          export NODE_ENV=your_node_env
          export BASE_URL=your_base_url
          export MORALIS_API_KEY=your_moralis_api_key
          export REDIS_URL=your_redis_url
          export PG_USER=your_pg_user
          export PG_PASSWORD=your_pg_password
          export PG_DB=your_pg_db
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
          docker-compose up -d
        EOF
